# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets

import sys
import re
import nltk

from morphy_logic import main, metadata


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 600)
        MainWindow.setMinimumSize(QtCore.QSize(1000, 600))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        self.clear_button = QtWidgets.QPushButton(self.centralwidget)
        self.clear_button.setObjectName("clear_button")
        self.clear_button.setEnabled(False)
        self.clear_button.setVisible(False)
        self.gridLayout.addWidget(self.clear_button, 1, 3, 1, 1)

        self.text_area = QtWidgets.QTextEdit(self.centralwidget)
        self.text_area.setObjectName("text_area")
        self.text_area.setSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        self.text_area.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents)
        self.gridLayout.addWidget(self.text_area, 0, 1, 1, 2)

        self.analyze_text_button = QtWidgets.QPushButton(self.centralwidget)
        self.analyze_text_button.setMinimumSize(QtCore.QSize(150, 0))
        self.analyze_text_button.setObjectName("analize_text_button")
        self.analyze_text_button.setEnabled(False)
        self.gridLayout.addWidget(self.analyze_text_button, 1, 2, 1, 1)

        self.import_text_button = QtWidgets.QPushButton(self.centralwidget)
        self.import_text_button.setMinimumSize(QtCore.QSize(150, 0))
        self.import_text_button.setObjectName("import_text_button")
        self.gridLayout.addWidget(self.import_text_button, 1, 1, 1, 1)

        self.result_table = QtWidgets.QTableWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.result_table.sizePolicy().hasHeightForWidth())
        self.result_table.setSizePolicy(sizePolicy)
        self.result_table.setObjectName("result_table")
        self.result_table.setColumnCount(0)
        self.result_table.setRowCount(0)
        self.result_table.setEnabled(False)
        self.result_table.setVisible(False)

        self.result_table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.result_table.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.result_table.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.result_table.setAlternatingRowColors(False)
        self.result_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior.SelectItems)
        self.result_table.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.result_table.setCornerButtonEnabled(False)
        self._set_result_table_vertical_headers()
        # self.result_table.setEditTriggers(QtWidgets.QTableWidget.EditTrigger.NoEditTriggers)

        self.gridLayout.addWidget(self.result_table, 0, 3, 1, 1)

        self.gridLayout_2.addLayout(self.gridLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self._connect_all(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Анализатор"))
        self.clear_button.setText(_translate("MainWindow", "Очистить"))
        self.analyze_text_button.setText(_translate("MainWindow", "Разобрать текст"))
        self.import_text_button.setText(_translate("MainWindow", "Импортировать текст"))

        self.result_table.horizontalHeaderItem(0).setText(_translate("MainWindow", "Словоформа"))
        self.result_table.horizontalHeaderItem(1).setText(
            _translate("MainWindow", "Количество в тексте")
        )
        self.result_table.horizontalHeaderItem(2).setText(
            _translate("MainWindow", "Дополнительная информация")
        )

    def _set_result_table_vertical_headers(self):
        self.result_table.setColumnCount(3)
        for i in range(3):
            item = QtWidgets.QTableWidgetItem()
            self.result_table.setHorizontalHeaderItem(i, item)

    def _add_result_table_vertical_header(self):
        self.result_table.setRowCount(self.result_table.rowCount() + 1)
        item = QtWidgets.QTableWidgetItem()
        item.setText(str(self.result_table.rowCount()))
        self.result_table.setVerticalHeaderItem(self.result_table.rowCount() - 1, item)

    def emplace_word(self, word: str, amount_in_text: int, additional_info: str):
        self._add_result_table_vertical_header()
        word_item = QtWidgets.QTableWidgetItem()
        word_item.setText(word)
        row_to_insert = self.result_table.rowCount() - 1
        self.result_table.setItem(row_to_insert, 0, word_item)
        amount_in_text_item = QtWidgets.QTableWidgetItem()
        amount_in_text_item.setText(str(amount_in_text))
        self.result_table.setItem(row_to_insert, 1, amount_in_text_item)
        additional_info_item = QtWidgets.QTableWidgetItem()
        additional_info_item.setText(additional_info)
        self.result_table.setItem(row_to_insert, 2, additional_info_item)

    def _connect_all(self, MainWindow):
        self.text_area.textChanged.connect(self._text_area_edited)
        self.import_text_button.clicked.connect(lambda: self._import_filename(MainWindow))
        self.analyze_text_button.clicked.connect(self.analyze_text_button_clicked)
        self.clear_button.clicked.connect(self._clear_button_clicked)

    def _text_area_edited(self):
        if not re.sub(r"\s+", "", self.text_area.toPlainText()):
            self.analyze_text_button.setEnabled(False)
        elif not self.analyze_text_button.isEnabled():
            self.analyze_text_button.setEnabled(True)

    def _import_filename(self, MainWindow):
        filename, ok = QtWidgets.QFileDialog.getOpenFileName(
            MainWindow,
            "импортировать файл с текстом",
            "/home",
            "Text files (*.txt *.rtf)"
        )
        if filename:
            if not re.sub(r"\s+", "", self.text_area.toPlainText()):
                self.text_area.clear()
            with open(filename, 'r') as fin:
                self.text_area.setText(fin.read())

    def analyze_text_button_clicked(self):
        nltk.download('averaged_perceptron_tagger')
        if not self.result_table.isEnabled():
            self.result_table.setVisible(True)
            self.clear_button.setVisible(True)
            self.result_table.setEnabled(True)
            self.clear_button.setEnabled(True)
        elif not self.result_table.rowCount() == 0:
            self._clear_result_table()
        result = main(self.text_area.toPlainText())
        for key, value in result.items():
            self.emplace_word(key, value, metadata[nltk.pos_tag([key])[0][1]])

    def _clear_result_table(self):
        i = 0
        while i < self.result_table.rowCount():
            self.result_table.removeRow(0)

    def _clear_button_clicked(self):
        if self.result_table.rowCount() == 0:
            self.result_table.setEnabled(False)
            self.clear_button.setEnabled(False)
            self.result_table.setVisible(False)
            self.clear_button.setVisible(False)
        else:
            self._clear_result_table()


app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()
sys.exit(app.exec_())
